var documenterSearchIndex = {"docs":
[{"location":"cell/#Voronoi-cells","page":"Voronoi cells","title":"Voronoi cells","text":"","category":"section"},{"location":"cell/","page":"Voronoi cells","title":"Voronoi cells","text":"Typically, the users should not need to instantiate cell objects directly and instead use      ones produced by container iteration.","category":"page"},{"location":"cell/","page":"Voronoi cells","title":"Voronoi cells","text":"For completeness, the constructor VoronoiCell is exposed. It is a wrapper for voro::voronoicell_neighbor     class","category":"page"},{"location":"cell/#VoroPlusPlus.VoronoiCell","page":"Voronoi cells","title":"VoroPlusPlus.VoronoiCell","text":"VoronoiCell\n\nA wrapper for the voronoicell_neighbor class representing Voronoi cells with neighbor     tracking.\n\n\n\n\n\n","category":"type"},{"location":"cell/","page":"Voronoi cells","title":"Voronoi cells","text":"Iteration over a container produces CheckedVoronoiCell objects which contain a reference to      Voronoi cell object and a boolean flag showing if the cell computation was successful.     The public API for CheckedVoronoiCell is the same as for VoronoiCell, but the latter      throws an error or returns a default value (if it makes sense) if the flag is false.","category":"page"},{"location":"cell/#Initialize-a-cell-with-a-given-shape","page":"Voronoi cells","title":"Initialize a cell with a given shape","text":"","category":"section"},{"location":"cell/#VoroPlusPlus.voronoicell_box","page":"Voronoi cells","title":"VoroPlusPlus.voronoicell_box","text":"voronoicell_box((xmin, ymin, zmin), (xmax, ymax, zmax))\n\nCreate a Voronoi cell initialized as rectangular cuboid with provided lower and higher     bounds.\n\n\n\n\n\n","category":"function"},{"location":"cell/#VoroPlusPlus.voronoicell_tetrahedron","page":"Voronoi cells","title":"VoroPlusPlus.voronoicell_tetrahedron","text":"voronoicell_tetrahedron(v1, v2, v3, v4)\n\nCreate a Voronoi cell initialized as tetrahedron with given vertices.\n\n\n\n\n\n","category":"function"},{"location":"cell/#VoroPlusPlus.voronoicell_octahedron","page":"Voronoi cells","title":"VoroPlusPlus.voronoicell_octahedron","text":"voronoicell_octahedron(r::Real)\n\nCreate a Voronoi cell shaped as octahedron with vertices at (r, 0, 0), (-r, 0, 0),     (0, r, 0), (0, -r, 0), (0, 0, r), and (0, 0, -r).\n\n\n\n\n\n","category":"function"},{"location":"cell/#Reshape-a-Voronoi-cell","page":"Voronoi cells","title":"Reshape a Voronoi cell","text":"","category":"section"},{"location":"cell/#VoroPlusPlus.translate!","page":"Voronoi cells","title":"VoroPlusPlus.translate!","text":"translate!(vc::AbstractVoronoiCell, d)\n\nTranslates the vertices of the Voronoi cell by a given vector.\n\n\n\n\n\n","category":"function"},{"location":"cell/#VoroPlusPlus.reset_to_box!","page":"Voronoi cells","title":"VoroPlusPlus.reset_to_box!","text":"reset_to_box!(vc::VoronoiCell, (u1, v1, w1), (u2, v2, w2))\n\nReshape a Voronoi cell into a rectangular cuboid with provided lower and higher bounds.\n\n\n\n\n\n","category":"function"},{"location":"cell/#VoroPlusPlus.reset_to_tetrahedron!","page":"Voronoi cells","title":"VoroPlusPlus.reset_to_tetrahedron!","text":"reset_to_tetrahedron!(vc::VoronoiCell, v1, v2, v3, v4)\n\nReshape a Voronoi cell into a tetrahedron with given vertices.\n\n\n\n\n\n","category":"function"},{"location":"cell/#VoroPlusPlus.reset_to_octahedron!","page":"Voronoi cells","title":"VoroPlusPlus.reset_to_octahedron!","text":"reset_to_octahedron!(vc::VoronoiCell, r::Real)\n\nReshape a Voronoi cell into an octahedron with vertices at (r, 0, 0), (-r, 0, 0),     (0, r, 0), (0, -r, 0), (0, 0, r), and (0, 0, -r).\n\n\n\n\n\n","category":"function"},{"location":"cell/#VoroPlusPlus.cut_by_particle_position!","page":"Voronoi cells","title":"VoroPlusPlus.cut_by_particle_position!","text":"cut_by_particle_position!(vc::VoronoiCell, pos)\n\nCut cell vc by a particle located at pos relative to the cell center.\n\n\n\n\n\n","category":"function"},{"location":"cell/#Properties-of-Voronoi-cells","page":"Voronoi cells","title":"Properties of Voronoi cells","text":"","category":"section"},{"location":"cell/#VoroPlusPlus.if_valid","page":"Voronoi cells","title":"VoroPlusPlus.if_valid","text":"if_valid(fn, vc::CheckedVoronoiCell, default=nothing)\n\nIf vc valid flag is true, apply function fn to vc, else return default.\n\nExamples\n\nif_valid(cell, 0.0) do vc\n    volume(vc)\nend\n\n\n\n\n\nif_valid(fn, vc::CheckedVoronoiCell, handler::Function)\n\nIf vc valid flag is true, apply function fn to vc, else call handler() which must     be a zero-argument function.\n\nExamples\n\nif_valid(cell, ()->error(\"Cannot perform operation on a non-valid Voronoi cell\")) do vc\n    volume(vc)\nend\n\n\n\n\n\nif_valid(fn, vc::VoronoiCell, default)\n\nApply function fn to vc. default is ignored, it is there only to unify the interface     with CheckedVoronoiCell.\n\n\n\n\n\n","category":"function"},{"location":"cell/#VoroPlusPlus.volume","page":"Voronoi cells","title":"VoroPlusPlus.volume","text":"volume(vc::AbstractVoronoiCell)\n\nReturn the volume of the Voronoi cell. For invalid cells, return 0.0.\n\n\n\n\n\n","category":"function"},{"location":"cell/#VoroPlusPlus.number_of_faces","page":"Voronoi cells","title":"VoroPlusPlus.number_of_faces","text":"number_of_faces(vc::AbstractVoronoiCell)\n\nReturn the number of faces of the Voronoi cell. For invalid cells, return zero.\n\n\n\n\n\n","category":"function"},{"location":"cell/#VoroPlusPlus.number_of_edges","page":"Voronoi cells","title":"VoroPlusPlus.number_of_edges","text":"number_of_edges(vc::AbstractVoronoiCell)\n\nReturn the number of edges of the Voronoi cell. For invalid cells, return zero.\n\n\n\n\n\n","category":"function"},{"location":"cell/#VoroPlusPlus.number_of_vertices","page":"Voronoi cells","title":"VoroPlusPlus.number_of_vertices","text":"number_of_vertices(vc::VoronoiCell)\n\nReturn the number of vertices of the cell.\n\n\n\n\n\n","category":"function"},{"location":"cell/#VoroPlusPlus.centroid","page":"Voronoi cells","title":"VoroPlusPlus.centroid","text":"centroid(vc::AbstractVoronoiCell)\n\nReturn the centroid vector of a valid Voronoi cell or a zero vector if the cell is invalid.\n\n\n\n\n\n","category":"function"},{"location":"cell/#VoroPlusPlus.vertex_positions","page":"Voronoi cells","title":"VoroPlusPlus.vertex_positions","text":"vertex_positions(vc::AbstractVoronoiCell[, offset])\n\nReturn the positions of cell vertices, optionally shifted by offset.\n\nThe returned object is a Vector{SVector{3,Float64}}.\n\noffset must be a length-3 array or tuple.\n\n\n\n\n\nvertex_positions(::Type{<:Matrix}, vc::AbstractVoronoiCell[, offset])\n\nReturn the positions of cell vertices, optionally shifted by offset, as a 3xN numeric     matrix.\n\noffset must be a length-3 array or tuple.\n\n\n\n\n\n","category":"function"},{"location":"cell/#VoroPlusPlus.vertex_positions!","page":"Voronoi cells","title":"VoroPlusPlus.vertex_positions!","text":"vertex_positions!(pos::AbstractVector, vc::AbstractVoronoiCell[, offset])\n\nFill vector pos with the positions of cell vertices, optionally shifted by offset.\n\nIf eltype(pos) is numeric, then 3 vector elements are stored per vertex. Otherwise, 1     vector is stored per vertex.\n\noffset must be a length-3 array or tuple.\n\n\n\n\n\n","category":"function"},{"location":"cell/#VoroPlusPlus.get_normals!","page":"Voronoi cells","title":"VoroPlusPlus.get_normals!","text":"get_normals!(v::Vector, vc::AbstractVoronoiCell)\n\nFill v with the normals to the faces of vc.\n\nIf v is a numeric vector, then normals are stored as 3 consecutive items. Otherwise,     normals are stored as SVector{3,Float64}.\n\n\n\n\n\n","category":"function"},{"location":"cell/#VoroPlusPlus.normals","page":"Voronoi cells","title":"VoroPlusPlus.normals","text":"normals(vc::AbstractVoronoiCell)\n\nReturn the normals to the faces of vc as Vector{SVector{3,Float64}}.\n\n\n\n\n\n","category":"function"},{"location":"cell/#Cell-output","page":"Voronoi cells","title":"Cell output","text":"","category":"section"},{"location":"cell/#VoroPlusPlus.draw_gnuplot","page":"Voronoi cells","title":"VoroPlusPlus.draw_gnuplot","text":"draw_gnuplot(output, vc::VoronoiCell, disp=(0.0, 0.0, 0.0))\n\nOutput cell Outputs the edges of the Voronoi cell in gnuplot format to an output stream or     to a file given by name. disp is a displacement to add to cell position.\n\n\n\n\n\n","category":"function"},{"location":"release-notes/#Version-history","page":"Version history","title":"Version history","text":"","category":"section"},{"location":"release-notes/#Version-0.1","page":"Version history","title":"Version 0.1","text":"","category":"section"},{"location":"release-notes/","page":"Version history","title":"Version history","text":"Initial release.","category":"page"},{"location":"walls/#Walls","page":"Walls","title":"Walls","text":"","category":"section"},{"location":"walls/","page":"Walls","title":"Walls","text":"Users may add walls to the tessellation.","category":"page"},{"location":"walls/","page":"Walls","title":"Walls","text":"Currently, only the default type of walls defined within Voro++ are supported.","category":"page"},{"location":"walls/#VoroPlusPlus.add_wall!","page":"Walls","title":"VoroPlusPlus.add_wall!","text":"add_wall!(con::AbstractContainer, w::AbstractWall)\n\nAdd wall w to container con.\n\n\n\n\n\n","category":"function"},{"location":"walls/#VoroPlusPlus.point_inside_walls","page":"Walls","title":"VoroPlusPlus.point_inside_walls","text":"point_inside_walls(pt, con::AbstractContainer)\n\nCheck if point pt is inside all walls added to con.\n\n\n\n\n\n","category":"function"},{"location":"walls/#VoroPlusPlus.wall_plane","page":"Walls","title":"VoroPlusPlus.wall_plane","text":"wall_plane((a, b, c), d[, wall_id=-99])\n\nDefine a planar wall described by the equation ax + by + cz = d. The inside of the wall is     defined as ax + by + cz < d.\n\n\n\n\n\n","category":"function"},{"location":"walls/#VoroPlusPlus.wall_sphere","page":"Walls","title":"VoroPlusPlus.wall_sphere","text":"wall_sphere((x0, y0, z0), r[, wall_id=-99])\n\nDefine a spherical wall described by the equation (x-x0)^2 + (y-y0)^2 + (z-z0)^2 = r^2.     The inside of the wall is defined as (x-x0)^2 + (y-y0)^2 + (z-z0)^2 < r^2.\n\n\n\n\n\n","category":"function"},{"location":"walls/#VoroPlusPlus.wall_cylinder","page":"Walls","title":"VoroPlusPlus.wall_cylinder","text":"wall_cylinder(origin, axis, r[, wall_id=-99])\n\nDefine a cylindrical wall described by a point origin on the axis, the direction axis     and the cylinder radius r.\n\n\n\n\n\n","category":"function"},{"location":"walls/#VoroPlusPlus.wall_cone","page":"Walls","title":"VoroPlusPlus.wall_cone","text":"wall_cone(apex, axis, angle[, wall_id=-99])\n\nDefine a conical wall described by the point apex, the direction axis     and the angle (in radians) measured from the axis.\n\n\n\n\n\n","category":"function"},{"location":"iteration/#Iteration","page":"Iteration over container","title":"Iteration","text":"","category":"section"},{"location":"iteration/","page":"Iteration over container","title":"Iteration over container","text":"Iteration over a Container gives pairs particle => cell where particle is a struct     holding integer ID, position and (optionally) radius, cell is a CheckedVoronoiCell. ","category":"page"},{"location":"iteration/#Unsafe-wrapper","page":"Iteration over container","title":"Unsafe wrapper","text":"","category":"section"},{"location":"iteration/","page":"Iteration over container","title":"Iteration over container","text":"By default, a fresh cell is allocated on each iteration, which may be suboptimal in terms      of efficiency. If you want to reuse the same VoronoiCell object through iteration,      there is wrapper Unsafe{<:AbstractContainer}.","category":"page"},{"location":"iteration/#Example","page":"Iteration over container","title":"Example","text":"","category":"section"},{"location":"iteration/","page":"Iteration over container","title":"Iteration over container","text":"vol = 0.0\n\nfor (p, vc) in Unsafe(con)\n    vol += volume(vc)\nend","category":"page"},{"location":"iteration/","page":"Iteration over container","title":"Iteration over container","text":"In this example, vc will hold a reference to the same VoronoiCell object which will be      modified during iteration.","category":"page"},{"location":"iteration/#eachparticle-and-eachcell","page":"Iteration over container","title":"eachparticle and eachcell","text":"","category":"section"},{"location":"iteration/","page":"Iteration over container","title":"Iteration over container","text":"In some cases, you don't need either cell information or particle information. Then, use      eachparticle and eachcell functions.","category":"page"},{"location":"iteration/#Example-2","page":"Iteration over container","title":"Example","text":"","category":"section"},{"location":"iteration/","page":"Iteration over container","title":"Iteration over container","text":"vol = 0.0\n\nfor vc in eachcell(Unsafe(con))\n    vol += volume(vc)\nend","category":"page"},{"location":"container/#Container","page":"Containers","title":"Container","text":"","category":"section"},{"location":"container/","page":"Containers","title":"Containers","text":"Container is a box in which the tessellation is performed.","category":"page"},{"location":"container/","page":"Containers","title":"Containers","text":"Voro++ supports periodic and non-periodic mono- and polydisperse containers.","category":"page"},{"location":"container/#Creating-a-container","page":"Containers","title":"Creating a container","text":"","category":"section"},{"location":"container/#Allocate-an-empty-container","page":"Containers","title":"Allocate an empty container","text":"","category":"section"},{"location":"container/#VoroPlusPlus.container","page":"Containers","title":"VoroPlusPlus.container","text":"container(; bounds, nblocks, periodic=(false, false, false), particles_per_block=8, ordering)\n\nAllocate space for a container of Voronoi cells.\n\nKeywords\n\nbounds: limits of the bounding box ((xmin, ymin, zmin), (xmax, ymax, zmax))\nnblocks: numbers of computation blocks along each axis\nperiodic::NTuple{3,Bool}: periodicity in each axis. Default: (false, false, false)\nparticles_per_block::Integer: initially allocate memory for this many particles   per block. Default: 8\nordering: UnspecifiedOrder() or InsertionOrder(). Default: UnspecifiedOrder().\n\n\n\n\n\n","category":"function"},{"location":"container/#VoroPlusPlus.polydisperse_container","page":"Containers","title":"VoroPlusPlus.polydisperse_container","text":"polydisperse_container(; bounds, nblocks, periodic=(false, false, false), particles_per_block=8, ordering)\n\nAllocate space for a container of Voronoi cells for polydisperse particles.\n\nKeywords\n\nbounds: limits of the bounding box (xmin, xmax, ymin, ymax, zmin, zmax)\nnblocks: numbers of computation blocks along each axis\nperiodic::NTuple{3,Bool}: periodicity in each axis. Default: (false, false, false)\nparticles_per_block::Integer: initially allocate memory for this many particles   per block. Default: 8\nordering: UnspecifiedOrder() or InsertionOrder(). Default: UnspecifiedOrder().\n\n\n\n\n\n","category":"function"},{"location":"container/#Read-particle-data-from-file","page":"Containers","title":"Read particle data from file","text":"","category":"section"},{"location":"container/#VoroPlusPlus.read_particles","page":"Containers","title":"VoroPlusPlus.read_particles","text":"read_particles(input; bounds, periodic=(false, false, false), ordering)\n\nread particle data from input which can be a path or I/O object.\n\nKeywords\n\nbounds: limits of the bounding box ((xmin, ymin, zmin), (xmax, ymax, zmax))\nperiodic: periodicity in each axis. Default: (false, false, false)\nordering: UnspecifiedOrder() or InsertionOrder(). Default: UnspecifiedOrder().\n\n\n\n\n\n","category":"function"},{"location":"container/#VoroPlusPlus.read_polydisperse_particles","page":"Containers","title":"VoroPlusPlus.read_polydisperse_particles","text":"read_polydisperse_particles(input; bounds, periodic=(false, false, false), ordering)\n\nread particle data from input which can be a path or I/O object.\n\nKeywords\n\nbounds: limits of the bounding box ((xmin, ymin, zmin), (xmax, ymax, zmax))\nperiodic: periodicity in each axis. Default: (false, false, false)\nordering: UnspecifiedOrder() or InsertionOrder(). Default: UnspecifiedOrder().\n\n\n\n\n\n","category":"function"},{"location":"container/#Particle-ordering","page":"Containers","title":"Particle ordering","text":"","category":"section"},{"location":"container/","page":"Containers","title":"Containers","text":"Ordering defines in which order the particles and their Voronoi cells are given upon     iteration over a container.","category":"page"},{"location":"container/","page":"Containers","title":"Containers","text":"UnspecifiedOrder() means that the order of insertion is not preserved upon iteration.","category":"page"},{"location":"container/","page":"Containers","title":"Containers","text":"InsertionOrder() means that the iteration produces particles in the same order they've     been inserted.","category":"page"},{"location":"container/","page":"Containers","title":"Containers","text":"With Voro++, it's possible to insert some particles with order tracking and some without     it. In Julia, this is not possible through public interface.","category":"page"},{"location":"container/#VoroPlusPlus.InsertionOrder","page":"Containers","title":"VoroPlusPlus.InsertionOrder","text":"InsertionOrder()\n\nA data structure to store the order of inserted particles into a Voronoi container. Wraps     voro::particle_order type.\n\n\n\n\n\n","category":"type"},{"location":"container/#VoroPlusPlus.UnspecifiedOrder","page":"Containers","title":"VoroPlusPlus.UnspecifiedOrder","text":"UnspecifiedOrder\n\nA singleton type to denote the lack of a specific order of iteration over a Voronoi     container.\n\n\n\n\n\n","category":"type"},{"location":"container/#Geometric-properties-of-a-container","page":"Containers","title":"Geometric properties of a container","text":"","category":"section"},{"location":"container/#VoroPlusPlus.bounding_box","page":"Containers","title":"VoroPlusPlus.bounding_box","text":"bounding_box(con::AbstractContainer)\n\nReturn tuple ((xmin, ymin, zmin), (xmax, ymax, zmax)).\n\n\n\n\n\n","category":"function"},{"location":"container/#VoroPlusPlus.periodicity","page":"Containers","title":"VoroPlusPlus.periodicity","text":"periodicity(con::AbstractContainer)\n\nReturn periodicity flags in X, Y, Z directions.\n\n\n\n\n\n","category":"function"},{"location":"container/#Adding-particles-to-the-tessellation","page":"Containers","title":"Adding particles to the tessellation","text":"","category":"section"},{"location":"container/#VoroPlusPlus.add_point!","page":"Containers","title":"VoroPlusPlus.add_point!","text":"add_point!(con::Container, id, (x, y, z[, r]))\n\nAdd a point to a container con.\n\nArguments:\n\ncon::Container\nid::Integer: must be convertible to Int32\n(x, y, z)::Real: coordinates of the particle to insert\nr::Real: radius (only for polydisperse containers)\n\n\n\n\n\n","category":"function"},{"location":"#VoroPlusPlus.jl","page":"Home","title":"VoroPlusPlus.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia bindings to Voro++ library, a library for Voronoi tessellations     in 3D in non-periodic and periodic boxes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"From Voro++ reference manual:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Voro++ is a software library for carrying out three-dimensional computations of the Voronoi tessellation.     A distinguishing feature of the Voro++ library is that it carries out cell-based calculations,     computing the Voronoi cell for each particle individually, rather than computing the Voronoi     tessellation as a global network of vertices and edges. It is particularly well-suited for applications     that rely on cell-based statistics, where features of Voronoi cells (eg. volume, centroid, number     of faces) can be used to analyze a system of particles.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package depends on the binary of Voro++ library and the CxxWrap wrapper. The source code for the     wrapper is available at https://github.com/vvpisarev/voropp-cxxwrap-julia. The pre-built binaries      for Linux-glibc platforms including both libraries are available as the package voropp_wrapper_jll.     For other platforms, manual build of Voro++ and the wrapper library is required (see build instructions     in the wrapper repo).","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package requires Julia 1.10 or later.","category":"page"},{"location":"#Installation-from-a-personal-package-registry","page":"Home","title":"Installation from a personal package registry","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\n\njulia> pkg\"registry add https://gitlab.com/pisarevvv/samma-registry.git\"\n\njulia> pkg\"add VoroPlusPlus\"","category":"page"},{"location":"#Add-package-by-Github-link","page":"Home","title":"Add package by Github link","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\n\njulia> pkg\"add https://github.com/vvpisarev/voropp_wrapper_jll.jl#voropp_wrapper-v0.1.0+1\"\n\njulia> pkg\"add https://github.com/vvpisarev/VoroPlusPlus.jl\"","category":"page"},{"location":"#Configuration-(only-for-manual-wrapper-builds)","page":"Home","title":"Configuration (only for manual wrapper builds)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Before the first use, configure the location of C++ wrapper:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using VoroPlusPlus\n\njulia> VoroPlusPlus.set_wrapper_path(\"/path/to/libvoro++wrap/lib\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then, restart Julia and the bindings should work in the new session.","category":"page"}]
}
